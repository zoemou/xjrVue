import i18n from "@/lang";

export default {
  //元素
  //"Create start-event": i18n.t("workFlow.zh.start"),
  //"Create end-event":i18n.t("workFlow.zh.end"),
  //"Create exclusive-gateway-event": i18n.t("workFlow.zh.excGatEvent"),
  //"Create inclusive-gateway-event": i18n.t("workFlow.zh.incGatEvent"),
  //"Create parallel-gateway-event": i18n.t("workFlow.zh.parGatEvent"),
  //"Create user-task-event": i18n.t("workFlow.zh.userTask"),
  //"Create script-task-event": i18n.t("workFlow.zh.scriptTask"),
  //"Create subprocess-expanded-event": i18n.t("workFlow.zh.subflow"),
  //"Create CallActivity-event": i18n.t("workFlow.zh.externalProcess"),
  //"Append EndEvent": i18n.t("workFlow.zh.end"),
  // Labels
  //"Activate the global connect tool": i18n.t("workFlow.zh.activateTool"),
  //"Append {type}": i18n.t("workFlow.zh.appendType"),
  //"Add Lane above": i18n.t("workFlow.zh.addLaneAbove"),
  //"Divide into two Lanes": i18n.t("workFlow.zh.divideTwo"),
  //"Divide into three Lanes": i18n.t("workFlow.zh.divideThree"),
  //"Add Lane below": i18n.t("workFlow.zh.addLaneBelow"),
  //"Append compensation activity": i18n.t("workFlow.zh.appendCompensation"),
  //"Change type": i18n.t("workFlow.zh.changeType"),
  //"Connect using Association": i18n.t("workFlow.zh.connectAssociation"),
  //"Connect using Sequence/MessageFlow or Association":i18n.t("workFlow.zh.sequenceMessageAss"),
  //"Connect using DataInputAssociation": i18n.t("workFlow.zh.dataInputAsso"),
  //Remove: i18n.t("workFlow.zh.remove"),
  //"Activate the hand tool": i18n.t("workFlow.zh.handTool"),
  //"Activate the lasso tool": i18n.t("workFlow.zh.lassoTool"),
  //"Activate the create/remove space tool": i18n.t("workFlow.zh.createRemoveTool"),
  //"Create expanded SubProcess": i18n.t("workFlow.zh.createSubProcess"),
  //"Create IntermediateThrowEvent/BoundaryEvent": i18n.t("workFlow.zh.intermediateThrow"),
  //"Create Pool/Participant": i18n.t("workFlow.zh.poolParticipant"),
  //"Parallel Multi Instance": i18n.t("workFlow.zh.parallelMulti"),
  //"Sequential Multi Instance": i18n.t("workFlow.zh.sequentialMulti"),
  //DataObjectReference: i18n.t("workFlow.zh.dataObject"),
  //DataStoreReference: i18n.t("workFlow.zh.dataStore"),
  //Loop: i18n.t("workFlow.zh.loop"),
  //"Ad-hoc": i18n.t("workFlow.zh.adHoc"),
  //"Create {type}": i18n.t("workFlow.zh.createType"),
  //Task: i18n.t("workFlow.zh.task"),
  //"Send Task": i18n.t("workFlow.zh.sendTask"),
  //"Receive Task": i18n.t("workFlow.zh.receiveTask"),
  //"User Task": i18n.t("workFlow.zh.userTask"),
  //"Manual Task": i18n.t("workFlow.zh.manualTask"),
  //"Business Rule Task": i18n.t("workFlow.zh.businessTask"),
  //"Service Task": i18n.t("workFlow.zh.serviceTask"),
  //"Script Task": i18n.t("workFlow.zh.scriptTask"),
  //"Call Activity": i18n.t("workFlow.zh.callActivity"),
  //"Sub Process (collapsed)": i18n.t("workFlow.zh.subflowCollapsed"),
  //"Sub Process (expanded)": i18n.t("workFlow.zh.subflowExpanded"),
  //"Start Event": i18n.t("workFlow.zh.startEvent"),
  //StartEvent: i18n.t("workFlow.zh.startEvent"),
  //"Intermediate Throw Event": i18n.t("workFlow.zh.intermediateEvent"),
  //"End Event": i18n.t("workFlow.zh.endEvent"),
  //EndEvent: i18n.t("workFlow.zh.endEvent"),
  //"Create Gateway": i18n.t("workFlow.zh.gateway"),
  //"Create Intermediate/Boundary Event": i18n.t("workFlow.zh.intermediateBoundary"),
  //"Message Start Event": i18n.t("workFlow.zh.messageStart"),
  //"Timer Start Event": i18n.t("workFlow.zh.timerStart"),
  //"Conditional Start Event": i18n.t("workFlow.zh.conditionalStart"),
  //"Signal Start Event": i18n.t("workFlow.zh.signalStart"),
  //"Error Start Event": i18n.t("workFlow.zh.errorStart"),
  //"Escalation Start Event": i18n.t("workFlow.zh.escalationStart"),
 // "Compensation Start Event": i18n.t("workFlow.zh.compensationStart"),
  //"Message Start Event (non-interrupting)": i18n.t("workFlow.zh.messageStartUnblock"),
  //"Timer Start Event (non-interrupting)": i18n.t("workFlow.zh.timerStartUnblock"),
  //"Conditional Start Event (non-interrupting)": i18n.t("workFlow.zh.conditionalStartUnblock"),
  //"Signal Start Event (non-interrupting)": i18n.t("workFlow.zh.signalStartUnblock"),
  //"Escalation Start Event (non-interrupting)": i18n.t("workFlow.zh.escalationStartUnblock"),
  //"Message Intermediate Catch Event": i18n.t("workFlow.zh.messageCatch"),
  //"Message Intermediate Throw Event": i18n.t("workFlow.zh.messageThrow"),
  //"Timer Intermediate Catch Event": i18n.t("workFlow.zh.timerCatch"),
  //"Escalation Intermediate Throw Event": i18n.t("workFlow.zh.escalationThrow"),
  //"Conditional Intermediate Catch Event": i18n.t("workFlow.zh.conditionalCatch"),
  //"Link Intermediate Catch Event": i18n.t("workFlow.zh.linkCatch"),
  //"Link Intermediate Throw Event": i18n.t("workFlow.zh.linkThrow"),
  //"Compensation Intermediate Throw Event": i18n.t("workFlow.zh.compensationThrow"),
  //"Signal Intermediate Catch Event": i18n.t("workFlow.zh.signalCatch"),
  //"Signal Intermediate Throw Event": i18n.t("workFlow.zh.signalThrow"),
  //"Message End Event": i18n.t("workFlow.zh.messageEnd"),
  //"Escalation End Event": i18n.t("workFlow.zh.escalationEnd"),
  //"Error End Event": i18n.t("workFlow.zh.errorEnd"),
  //"Cancel End Event": i18n.t("workFlow.zh.cancelEnd"),
  //"Compensation End Event": i18n.t("workFlow.zh.compensationEnd"),
  //"Signal End Event": i18n.t("workFlow.zh.signalEnd"),
  //"Terminate End Event": i18n.t("workFlow.zh.terminateEnd"),
  //"Message Boundary Event": i18n.t("workFlow.zh.messageBoundary"),
  //"Message Boundary Event (non-interrupting)": i18n.t("workFlow.zh.messageBoundaryUnblock"),
  //"Timer Boundary Event": i18n.t("workFlow.zh.timerBoundary"),
  //"Timer Boundary Event (non-interrupting)": i18n.t("workFlow.zh.timerBoundaryUnblock"),
  //"Escalation Boundary Event": i18n.t("workFlow.zh.escalationBoundary"),
  //"Escalation Boundary Event (non-interrupting)": i18n.t("workFlow.zh.escalationBoundaryUnblock"),
  //"Conditional Boundary Event": i18n.t("workFlow.zh.conditionalBoundary"),
  //"Conditional Boundary Event (non-interrupting)":i18n.t( "workFlow.zh.conditionalBoundaryUnblock"),
  //"Error Boundary Event": i18n.t("workFlow.zh.errorBoundary"),
  //"Cancel Boundary Event": i18n.t("workFlow.zh.cancelBoundary"),
  //"Signal Boundary Event":i18n.t( "workFlow.zh.signalBoundary"),
  //"Signal Boundary Event (non-interrupting)": i18n.t("workFlow.zh.signalBoundaryUnblock"),
  //"Compensation Boundary Event": i18n.t("workFlow.zh.compensationBoundary"),
  //"Exclusive Gateway": i18n.t("workFlow.zh.excGatEvent"),
  //"Parallel Gateway": i18n.t("workFlow.zh.parGatEvent"),
  //"Inclusive Gateway": i18n.t("workFlow.zh.incGatEvent"),
  //"Complex Gateway": i18n.t("workFlow.zh.complexGateway"),
  //"Event based Gateway": i18n.t("workFlow.zh.evenGateway"),
  //Transaction: i18n.t("workFlow.zh.transport"),
  //"Sub Process": i18n.t("workFlow.zh.subflow"),
  //"Event Sub Process": i18n.t("workFlow.zh.eventSubflow"),
 // "Collapsed Pool": i18n.t("workFlow.zh.collapsedPool"),
 // "Expanded Pool": i18n.t("workFlow.zh.expandedPool"),
  // Errors
  "no parent for {element} in {parent}": i18n.t("workFlow.zh.hintErrorA"),
  "no shape type specified": i18n.t("workFlow.zh.hintErrorB"),
  "flow elements must be children of pools/participants":i18n.t("workFlow.zh.hintErrorC"),
  "out of bounds release": "out of bounds release",
  "more than {count} child lanes": i18n.t("workFlow.zh.hintErrorD"),
  "element required": i18n.t("workFlow.zh.hintErrorE"),
  "diagram not part of bpmn:Definitions": i18n.t("workFlow.zh.hintErrorF"),
  "no diagram to display": i18n.t("workFlow.zh.hintErrorG"),
  "no process or collaboration to display": i18n.t("workFlow.zh.hintErrorH"),
  "element {element} referenced by {referenced}#{property} not yet drawn":i18n.t( "workFlow.zh.hintErrorI"),
  "already rendered {element}": i18n.t("workFlow.zh.hintErrorJ"),
  "failed to import {element}": i18n.t("workFlow.zh.hintErrorK"),
  // 属性面板的参数
  //Id: i18n.t("workFlow.zh.mark"),
  Name: i18n.t("workFlow.zh.name"),
  General: i18n.t("workFlow.zh.general"),
  Details:i18n.t("workFlow.zh.details"),
  "Message Name": i18n.t("workFlow.zh.inforName"),
  Message: i18n.t("workFlow.zh.infor"),
  Initiator: i18n.t("workFlow.zh.initiator"),
  "Asynchronous Continuations": i18n.t("workFlow.zh.asynchronousContinu"),
  "Asynchronous Before": i18n.t("workFlow.zh.asynchronousBefore"),
  "Asynchronous After": i18n.t("workFlow.zh.asynchronousAfter"),
  "Job Configuration": i18n.t("workFlow.zh.jobConfig"),
  Exclusive: i18n.t("workFlow.zh.exclude"),
  "Job Priority": i18n.t("workFlow.zh.jobPriority"),
  "Retry Time Cycle": i18n.t("workFlow.zh.timeCycle"),
  Documentation: i18n.t("workFlow.zh.documents"),
  "Element Documentation": i18n.t("workFlow.zh.elementDocuments"),
  "History Configuration": i18n.t("workFlow.zh.historyConfig"),
  "History Time To Live": i18n.t("workFlow.zh.historyTime"),
  Forms: i18n.t("workFlow.zh.forms"),
  "Form Key": i18n.t("workFlow.zh.formKey"),
  "Form Fields": i18n.t("workFlow.zh.formField"),
  "Business Key": i18n.t("workFlow.zh.businessKey"),
  "Form Field": i18n.t("workFlow.zh.formField"),
  ID: i18n.t("workFlow.zh.number"),
  Type: i18n.t("workFlow.zh.type"),
  Label: i18n.t("workFlow.zh.name"),
  "Default Value": i18n.t("workFlow.zh.defaultValue"),
  Validation: i18n.t("workFlow.zh.verify"),
  "Add Constraint": i18n.t("workFlow.zh.addConstraint"),
  Config: i18n.t("workFlow.zh.config"),
  //Properties: i18n.t("workFlow.zh.attribute"),
  //"Add Property": i18n.t("workFlow.zh.addProperty"),
  Value: i18n.t("workFlow.zh.value"),
  Listeners: i18n.t("workFlow.zh.listeners"),
  "Execution Listener": i18n.t("workFlow.zh.performMonitor"),
  "Event Type": i18n.t("workFlow.zh.eventType"),
  "Listener Type": i18n.t("workFlow.zh.listenerType"),
  "Java Class": i18n.t("workFlow.zh.javaClass"),
  Expression: i18n.t("workFlow.zh.expression"),
  "Must provide a value": i18n.t("workFlow.zh.provideValue"),
  "Delegate Expression": i18n.t("workFlow.zh.delegateExpress"),
  Script: i18n.t("workFlow.zh.script"),
  "Script Format": i18n.t("workFlow.zh.scriptFormat"),
  "Script Type": i18n.t("workFlow.zh.scriptType"),
  "Inline Script": i18n.t("workFlow.zh.inlineScript"),
  "External Script": i18n.t("workFlow.zh.externalScript"),
  Resource: i18n.t("workFlow.zh.resource"),
  "Field Injection": i18n.t("workFlow.zh.fieldInject"),
  Extensions: i18n.t("workFlow.zh.extensions"),
  "Input/Output": i18n.t("workFlow.zh.inputOutput"),
  "Input Parameters": i18n.t("workFlow.zh.inputParameter"),
  "Output Parameters": i18n.t("workFlow.zh.outputParameter"),
  Parameters: i18n.t("workFlow.zh.parameter"),
  "Output Parameter": i18n.t("workFlow.zh.outputParameter"),
  "Timer Definition Type": i18n.t("workFlow.zh.timerDefinitionType"),
  "Timer Definition": i18n.t("workFlow.zh.timerDefinition"),
  Date: i18n.t("workFlow.zh.date"),
  Duration: i18n.t("workFlow.zh.continuous"),
  Cycle: i18n.t("workFlow.zh.loop"),
  Signal: i18n.t("workFlow.zh.signal"),
  "Signal Name": i18n.t("workFlow.zh.signalName"),
  Escalation: i18n.t("workFlow.zh.upgrade"),
  Error: i18n.t("workFlow.zh.error"),
  "Link Name": i18n.t("workFlow.zh.linkName"),
  Condition: i18n.t("workFlow.zh.conditionName"),
  "Variable Name": i18n.t("workFlow.zh.variableName"),
  "Variable Event": i18n.t("workFlow.zh.variableEvent"),
  "Specify more than one variable change event as a comma separated list.":
    i18n.t("workFlow.zh.moreChangeEvent"),
  "Wait for Completion": i18n.t("workFlow.zh.waitCompletion"),
  "Activity Ref": i18n.t("workFlow.zh.activityRef"),
  "Version Tag": i18n.t("workFlow.zh.versionTag"),
  Executable: i18n.t("workFlow.zh.executableFile"),
  "External Task Configuration": i18n.t("workFlow.zh.externalTask"),
  "Task Priority": i18n.t("workFlow.zh.taskPriority"),
  External: i18n.t("workFlow.zh.external"),
  Connector: i18n.t("workFlow.zh.connector"),
  "Must configure Connector": i18n.t("workFlow.zh.configConnector"),
  "Connector Id": i18n.t("workFlow.zh.connectorId"),
  Implementation: i18n.t("workFlow.zh.implementation"),
  "Field Injections": i18n.t("workFlow.zh.fieldInject"),
  Fields: i18n.t("workFlow.zh.field"),
  "Result Variable": i18n.t("workFlow.zh.resultVariable"),
  Topic: i18n.t("workFlow.zh.topic"),
  "Configure Connector": i18n.t("workFlow.zh.configuConnector"),
  "Input Parameter": i18n.t("workFlow.zh.inputParameter"),
  //Assignee: i18n.t("workFlow.zh.assignee"),
  //"Candidate Users": i18n.t("workFlow.zh.candidateUsers"),
  //"Candidate Groups": i18n.t("workFlow.zh.candidateGroups"),
  "Due Date": i18n.t("workFlow.zh.dueDate"),
  "Follow Up Date": i18n.t("workFlow.zh.followUpDate"),
  Priority: i18n.t("workFlow.zh.priority"),
  "The follow up date as an EL expression (e.g. ${someDate} or an ISO date (e.g. 2015-06-26T09:54:00)":
    i18n.t("workFlow.zh.hintEgOne"),
  "The due date as an EL expression (e.g. ${someDate} or an ISO date (e.g. 2015-06-26T09:54:00)":
    i18n.t("workFlow.zh.hintEgTwo"),
  //Variables: i18n.t("workFlow.zh.variable")
};

export const NodeName = {
  "bpmn:Process": i18n.t("workFlow.zh.processAttributes"),
  "bpmn:StartEvent": i18n.t("StartEvent"),
  "bpmn:IntermediateThrowEvent": i18n.t("Intermediate Throw Event"),
  "bpmn:Task": i18n.t("Task"),
  "bpmn:SendTask": i18n.t("Send Task"),
  "bpmn:ReceiveTask": i18n.t("Receive Task"),
  "bpmn:UserTask": i18n.t("Create user-task-event"),
  "bpmn:CallActivity": i18n.t("Create CallActivity-event"),
  "bpmn:SubProcess": i18n.t("Create subprocess-expanded-event"),
  "bpmn:ManualTask": i18n.t("Manual Task"),
  "bpmn:BusinessRuleTask": i18n.t("Business Rule Task"),
  "bpmn:ServiceTask": i18n.t("Service Task"),
  "bpmn:ScriptTask": i18n.t("Create script-task-event"),
  "bpmn:EndEvent": i18n.t("Append EndEvent"),
  "bpmn:SequenceFlow": i18n.t("workFlow.zh.sequenceFlow"),
  "bpmn:ExclusiveGateway": i18n.t("Exclusive Gateway"),
  "bpmn:ParallelGateway": i18n.t("Parallel Gateway"),
  "bpmn:InclusiveGateway": i18n.t("Inclusive Gateway"),
  "bpmn:ComplexGateway": i18n.t("Complex Gateway"),
  "bpmn:EventBasedGateway": i18n.t("Event based Gateway")
};
